#!/usr/bin/env ruby

require 'spaceape-cfn'
require 'pathname'
require 'gli'

include GLI::App

program_desc "Spaceape Cloudformation Tool"

desc "Generate the scaffold of a stack, including cfndsl template and config files"
long_desc %{Templates can be found in the skel/ directory.
For the common cases you can specify as_group_with_elb or as_group_no_elb}

switch [:nobogcheck], :default_value => false
flag [:region], :default_value => "us-east-1"

pre do |globals, command, options, args|
  unless globals[:nobogcheck] == true 
    profile = %x{bog}.chomp
    if Pathname.pwd.to_s.match(%r{/cloudformation/#{profile}}) == nil
      raise "Bog profile is #{profile} yet you don't appear to be in the same Cloudformation directory. Pass --nobogcheck (before all other args) to override"
    end
  end
  true
end

command :scaffold do |c|
  c.flag [:game]
  c.flag [:config_template, 'config-template']
  c.switch [:autoparam]
  c.flag 
  c.action do |globals, options, args|
    help_now!("Wrong number of arguments for scaffold") if args.length == 0
    klass = args[0] == "ecs" ? Spaceape::Cloudformation::EcsGenerator : Spaceape::Cloudformation::Generator
    s = klass.new(*args[0..1], globals[:region])
    s.scaffold(options, *args[2..-1])
  end
end

desc "Generate cloudformation JSON"
long_desc %{Generate JSON from CFNDSL template and config files}
command :generate do |c|
  c.action do |globals, options, args|
    help_now!("Wrong number of arguments for generate") unless args.length == 2
    klass = case args[0]
    when "ecs"
      Spaceape::Cloudformation::EcsGenerator
    when "launchconfig"
      Spaceape::Cloudformation::LaunchConf
    else
      Spaceape::Cloudformation::Generator 
    end
    args << globals[:region] if globals[:region]
    s = klass.new(*args)
    s.generate
  end
end

desc "Upload JSON template to AWS"
long_desc "Create a stack from pre-generated JSON template"
command :build do |c|
  c.flag [:policy]
  c.flag [:stackname] 
  c.flag [:revision] 
  c.switch [:y]
  c.switch [:no_taskdef, 'no-taskdef'] 
  c.action do |globals, options, args|
    help_now!("Wrong number of arguments for build") unless args.length == 2
    args << globals[:region]
    klass = args[0] == "ecs" ? Spaceape::Cloudformation::EcsUploader : Spaceape::Cloudformation::Uploader
    s = klass.new(*args)
    s.create_stack(options)
  end
end

desc "Update JSON template on AWS"
long_desc "Update a stack with a pre-generated JSON template. You'll probably want to specify a policy to override the default."
command :update do |c|
  c.flag [:policy]
  c.flag [:stackname]
  c.flag [:revision] 
  c.switch [:y]
  c.switch [:no_taskdef, 'no-taskdef']
  c.switch [:taskdef_only, 'taskdef-only']
  c.action do |globals, options, args|
    help_now!("Wrong number of arguments for build") unless args.length == 2
    args << globals[:region]
    klass = args[0] == "ecs" ? Spaceape::Cloudformation::EcsUploader : Spaceape::Cloudformation::Uploader
    s = klass.new(*args)
    s.update_stack(options)
  end
end

desc "Upload a launch config template"
long_desc "Upload a pre-generated launch config template to S3"
command :upload do |c|
  c.flag [:bucket]
  c.action do |globals, options, args|
    args << globals[:region]
    s = Spaceape::Cloudformation::LaunchConf.new(*args)
    s.upload(options)
  end
  
end

exit run(ARGV)
